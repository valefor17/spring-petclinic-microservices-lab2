pipeline {
  agent any

  parameters {
    string(name: 'customers-service', defaultValue: 'main', description: 'Branch you want to deploy customers-service')
    string(name: 'vets-service', defaultValue: 'main', description: 'Branch you want to deploy vets-service')
    string(name: 'visits-service', defaultValue: 'main', description: 'Branch you want to deploy visits-service')
    string(name: 'api-gateway', defaultValue: 'main', description: 'Branch you want to deploy api-gateway')
    choice(name: 'developer', choices: ['thuw', 'trucs', 'quys', 'taif'], description: 'Developer name')
  }

  environment {
    HELM_REPO = 'spring-petclinic-microservices-gitops'
    GIT_REPO_URL = 'https://github.com/vantaicn/spring-petclinic-microservices-gitops.git'
    SOURCE_REPO = 'https://github.com/spring-petclinic/spring-petclinic-microservices.git'
  }

  stages {
    stage('Get Commit Hashes') {
      steps {
        script {
          services = [
            'customers-service': 'spring-petclinic-customers-service',
            'vets-service': 'spring-petclinic-vets-service',
            'visits-service': 'spring-petclinic-visits-service',
            'api-gateway': 'spring-petclinic-api-gateway'
          ]
          tagMap = [:]

          def getTagForBranch = { branch ->
            if (!branch || branch == 'main') {
              return 'latest'
            }
            return sh(script: "git ls-remote ${SOURCE_REPO} refs/heads/${branch} | cut -f1", returnStdout: true).trim().take(7)
          }

          services.each { paramName, helmServiceName ->
            def branch = params[paramName]
            def tag = getTagForBranch(branch)
            tagMap[helmServiceName] = tag
            echo "${helmServiceName} -> ${tag}"
          }
        }
      }
    }

    stage('Clone Helm GitOps Repo') {
      steps {
        dir("${HELM_REPO}") {
          git url: "${GIT_REPO_URL}", credentialsId: 'github-vantaicn', branch: 'main'
        }
      }
    }

    stage('Update Helm values') {
      steps {
        script {
          def valuesFile = "${HELM_REPO}/values-${params.developer}.yaml"
          tagMap.each { helmServiceName, tag ->
            sh """
              yq e '.services["${helmServiceName.replace("spring-petclinic-", "")}"].tag = "${tag}"' -i ${valuesFile}
            """
          }
        }
      }
    }

    stage('Commit and Push') {
      steps {
        dir("${HELM_REPO}") {
          withCredentials([usernamePassword(credentialsId: 'github-vantaicn', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
            sh """
              git config user.email "ci@example.com"
              git config user.name "jenkins"
              git add values-${params.developer}.yaml
              git commit -m "Update ${params.developer} values - Build #${BUILD_NUMBER}" || echo "No changes"
              git push https://${GIT_USER}:${GIT_PASS}@github.com/vantaicn/spring-petclinic-microservices-gitops.git HEAD:main
            """
          }
        }
      }
    }

    stage('Set Build Description') {
      steps {
        script {
          def desc = services.collect { paramName, helmServiceName ->
            "${helmServiceName} = ${tagMap[helmServiceName]}"
          }.join(', ')

          currentBuild.displayName = "#${BUILD_NUMBER} - ${params.developer}"
          currentBuild.description = "${desc} <br><a href='http://${params.developer}.spring-petclinic'>Xem hệ thống</a>"
        }
      }
    }
  }
}
