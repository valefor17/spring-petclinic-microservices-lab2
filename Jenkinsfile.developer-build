pipeline {
  agent any

  parameters {
    string(name: 'customers-service', defaultValue: 'main')
    string(name: 'vets-service', defaultValue: 'main')
    string(name: 'visits-service', defaultValue: 'main')
    string(name: 'api-gateway', defaultValue: 'main')
    choice(name: 'developer', choices: ['thuw', 'trucs', 'quys', 'taif'])
  }

  environment {
    HELM_REPO = 'spring-petclinic-microservices-gitops'
    GIT_REPO_URL = 'https://github.com/vantaicn/spring-petclinic-microservices-gitops.git'
    SOURCE_REPO = 'https://github.com/valefor17/spring-petclinic-microservices-lab2.git'
  }

  stages {
    stage('Get Commit Hashes') {
      steps {
        script {
          services = [
            'customers-service': 'spring-petclinic-customers-service',
            'vets-service': 'spring-petclinic-vets-service',
            'visits-service': 'spring-petclinic-visits-service',
            'api-gateway': 'spring-petclinic-api-gateway'
          ]
          tagMap = [:]

          def getTagForBranch = { serviceKey, branch ->
            if (!branch || branch == 'main') {
              return 'latest'
            }

            def commit = sh(
              script: "git ls-remote ${SOURCE_REPO} refs/heads/${branch} | cut -f1",
              returnStdout: true
            ).trim()

            if (!commit) {
              error "❌ Branch '${branch}' does not exist in the source repo for service '${serviceKey}'!"
            }

            def tag = commit.take(7)

            def imageName = "vantaicn/${serviceKey}"
            def exists = sh(
              script: "curl -s https://hub.docker.com/v2/repositories/${imageName}/tags/${tag} | grep -q 'name'",
              returnStatus: true
            ) == 0

            if (!exists) {
              error "❌ Docker image '${imageName}:${tag}' does not exist on Docker Hub!"
            }

            return tag
          }

          services.each { paramName, helmServiceName ->
            def branch = params[paramName]
            def tag = getTagForBranch(helmServiceName, branch)
            tagMap[helmServiceName] = tag
            echo "${helmServiceName} -> ${tag}"
          }
        }
      }
    }

    stage('Clone Helm GitOps Repo') {
      steps {
        dir("${HELM_REPO}") {
          git url: "${GIT_REPO_URL}", credentialsId: 'github-vantaicn', branch: 'main'
        }
      }
    }

    stage('Deploy helm') {
      steps {
        script {
          dir("${HELM_REPO}") {
            def helmRelease = "spring-petclinic-${namespace}"
            def namespace = "${params.developer}"

            def releaseExists = sh(script: "helm status ${helmRelease} -n ${namespace}", returnStatus: true) == 0
            def helmCmd = releaseExists ? "upgrade" : "install"

            def customersTag  = tagMap['spring-petclinic-customers-service']
            def visitsTag     = tagMap['spring-petclinic-visits-service']
            def vetsTag       = tagMap['spring-petclinic-vets-service']
            def gatewayTag    = tagMap['spring-petclinic-api-gateway']

            sh """#!/bin/bash
              helm ${helmCmd} ${helmRelease} . -f values.yaml \\
                --set services.customers-service.tag=${customersTag} \\
                --set services.visits-service.tag=${visitsTag} \\
                --set services.vets-service.tag=${vetsTag} \\
                --set services.api-gateway.tag=${gatewayTag} \\
                --set ingress.host=${namespace}.spring-petclinic \\
                --set ingress.namespace=${namespace} \\
                -n ${namespace} --create-namespace
            """
          }
        }
      }
    }

    stage('Set Build Description') {
      steps {
        script {
          currentBuild.displayName = "#${BUILD_NUMBER} - ${params.developer}"
          currentBuild.description = "[PREVIEW](http://${params.developer}.spring-petclinic:32623)"
        }
      }
    }
  }
}
